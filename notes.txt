FRAM (Ferroelectric Random Access Memory) is used for both program memory and data memory (like in the MSP430FR6989). It replaces Flash (program memory), SRAM (volatile data memory) and EEPROM (non-volatile data memory) memories inside a microcontroller.
 
XOR (^) is used extensively in C programs for microcontrollers to toggle a specific bit. NOT (~) cannot be used to invert only specific bits in the number. When a bit is XORed with a 0, it does not change. When a bit is XORed with a 1, it is inverted.

The data bus is typically 8-, 16-, or 32-bits wide. You will often hear microcontrollers described as 8-bit, 16-bit, or 32-bit devices. This is a description of how wide the data bus is on the microcontroller and how many bits the Arithmetic Logic Unit can process at one time.

float - Approximately 7 digits of precision. double - Approximately 15 digits of precision.

Do not use float/double variables unless absolutely necessary. While they are comparable in size to the other variables types, float variables are much more difficult for your microcontroller to manipulate. If you use even one float operation (like addition), your program may grow by several kilobytes.

Use a smaller variable type to hold smaller values.

CCS will default char (without a further designation of signed or unsigned) to unsigned char variables (stores 0 to 255).

CCS will default int (without a further designation of signed or unsigned) to signed int variables (stores -32,768 to +32,767).

In a signed char 127 + 1 = -128 and -128 - 1 = 127

++a Pre-increment the variable a before it is used in your instruction
a++ Post-increment the variable a after it is used in your instruction

x = ++a;	a = a + 1;
		x = a;

x = a++;	x = a;
		a = a + 1;

--a Pre-decrement
a-- Post-decrement

A good way to remember the difference between pre- and post- is that if the  notation comes before the  variable, it will be incremented/decremented before anything else in the instruction. If the notation comes after the variable, it will increment/decrement after the rest of the instruction has evaluated.

MSP430G2553 doesn't have a Power Management Module (PMM). There isn't a Port I/O Control by a Power Mode Control Register (Like MSP430FR6989 PM5CTL0 - Power Mode 5 Control Register 0).
