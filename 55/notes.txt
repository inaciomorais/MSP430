Active mode (AM) current at 1 MHz: ~400 uA
Low-power mode 0 (LPM0) current: 56 uA

Principles for Low-Power Applications:
• Use interrupts to wake the processor and control program flow.
• Peripherals should be switched on only when needed.
• Use low-power integrated peripheral modules in place of software driven functions. For example
Timer_A can automatically generate PWM and capture external timing, with no CPU
resources.
• Calculated branching and fast table look-ups should be used in place of flag polling and long software
calculations.
• Avoid frequent subroutine and function calls due to overhead.
• For longer software routines, single-cycle CPU registers should be used.

Active	CPU is active, all enabled clocks are active
LPM0	CPU, MCLK are disabled, SMCLK, ACLK are active
LPM1	CPU, MCLK are disabled. DCO and DC generator are disabled if the DCO is not used for SMCLK. ACLK is active.
LPM2	CPU, MCLK, SMCLK, DCO are disabled. DC generator remains enabled. ACLK is active.
LPM3	CPU, MCLK, SMCLK, DCO are disabled. DC generator disabled. ACLK is active.
LPM4	CPU and all clocks disabled.

An enabled interrupt event wakes the MSP430 from any of the low-power operating modes.

For low power mode, we are only adding one more task to the BIt Set Status Register instruction. In addition to "activating" all the interrupts we enabled, the instruction will now also move the microcontroller into a lower power mode - specifically, Low Power Mode 0.

Similarly, the other low power modes can be accessed. LPM1 will put the microcontroller into Low Power Mode 1, and so forth.

Once the microcontroller goes into a low power mode, you need an interrupt to wake it back up. Therefore, you should always expect to see interrupt service routines in a program that uses a low power mode.

To leave low power mode, you only need one instruction: _BIC_SR(LPM0_EXIT); Similarly, if you were in one of the other modes, you would say LPM1_EXIT, LPM2_EXIT, LPM3_EXIT, or LPM4_EXIT, respectively. Once the microcontroller goes into lower power mode, it will not execute any program instructions inside of main(). Therefore, we need to put the LPM0_EXIT instruction inside of an interrupt.
