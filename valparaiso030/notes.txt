General Purpose Timer Up mode is probably sufficient for 95% of the developers, 95% of the time.

Two 16-Bit timer/counter (Timer_A TA0 TA1) With Three Capture/Compare Registers

The timer has four modes of operation: stop, up, continuous, and up/down. The operating mode is selected with the TACTL MC bits:

00 Stop - The timer is halted.
01 Up - The timer repeatedly counts from zero to the value of TACCR0
10 Continuous - The timer repeatedly counts from zero to 0FFFFh.
11 Up/down - The timer repeatedly counts from zero up to the value of TACCR0 and back down to zero.

The timer repeatedly counts up to the value of compare register TACCR0.

Timer A ConTroL Register (TACTL): 
Bit 9-8 - TASSEL - Timer_A clock source select
00b = TAxCLK (externally)
01b = ACLK (Auxiliary clock)
10b = SMCLK (Subsystem master clock)
11b = INCLK (INCLK is device-specific and is often assigned to the inverted TBCLK) (see the device specific
data sheet)

Bit 7-6 - ID - Input divider. These bits select the divider for the input clock.
00b = /1
01b = /2
10b = /4
11b = /8

Bit 0 - TAIFG - Timer_A interrupt flag
0b = No interrupt pending
1b = Interrupt pending

The clock source is selected with the TASSEL bits. The selected clock source may be passed directly to the timer or
divided by 2, 4, or 8, using the ID bits.

TACCRn Register - Timer_A Capture/Compare n Register
Bit 15-0 - TACCR0 - Compare mode: TACCRn holds the data for the comparison to the timer value in the Timer_A Register, TAR.
Capture mode: The Timer_A Register, TAR, is copied into the TACCRn register when a capture is performed.

General purpose timer means that it can count from 0x0000 up to 0xFFFF (or 0 to 65535 decimal).

There are a lot of different ways that TACCRn can be used, but in the UP mode  that we are using, the  peripheral is going to compare its count value to the number you store in it.


After a PUC, MCLK and SMCLK are sourced from DCOCLK at ~1.1 MHz (see the device-specific data
sheet for parameters) and ACLK is sourced from LFXT1CLK in LF mode with an internal load capacitance
of 6 pF.

• ACLK: Auxiliary clock. ACLK is software selectable as LFXT1CLK or VLOCLK. ACLK is divided by 1,
2, 4, or 8. ACLK is software selectable for individual peripheral modules.
• SMCLK: Sub-main clock. SMCLK is software selectable as LFXT1CLK, VLOCLK, XT2CLK (if available
on-chip), or DCOCLK. SMCLK is divided by 1, 2, 4, or 8. SMCLK is software selectable for individual
peripheral modules.

For optimal low-power performance, ACLK
can be sourced from a low-power 32768-Hz watch crystal (if available), providing a stable time base for
the system and low-power standby operation, or from the internal low-frequency oscillator when crystal accurate
time keeping is not required. The MCLK can be configured to operate from the on-chip DCO that
can be activated when requested by interrupt-driven events. The SMCLK can be configured to operate
from a crystal or the DCO, depending on peripheral requirements. A flexible clock distribution and divider
system is provided to fine tune the individual clock requirements.

The internal very-low-power low-frequency oscillator (VLO) provides a typical frequency of 12 kHz (see
device-specific data sheet for parameters) without requiring a crystal. VLOCLK source is selected by
setting LFXT1Sx = 10 when XTS = 0. The OSCOFF bit disables the VLO for LPM4. The LFXT1 crystal
oscillators are disabled when the VLO is selected reducing current consumption. The VLO consumes no
power when not being used.

After a PUC, RSELx = 7 and DCOx = 3, allowing the DCO to start at a mid-range frequency. MCLK and
SMCLK are sourced from DCOCLK.

The LFXT1 oscillator supports ultra-low current consumption using a 32768-Hz watch crystal in LF mode
(XTS = 0). A watch crystal connects to XIN and XOUT without any other external components. The
software-selectable XCAPx bits configure the internally provided load capacitance for the LFXT1 crystal in
LF mode. This capacitance can be selected as 1 pF, 6 pF, 10 pF, or 12.5 pF typical. Additional external
capacitors can be added if necessary.

BCSCTL2, Basic Clock System Control Register 2
DIVSx - Bits 2-1 - Divider for SMCLK
00 /1
01 /2 2h
10 /4 4h
11 /8 6h

Each MSP430F2xx device (and most MSP430G2xx devices; see device-specific data sheets) has calibrated DCOCTL and BCSCTL1 register settings for specific frequencies stored in information memory segment A. To use the calibrated settings, the information is copied into the DCOCTL and BCSCTL1 registers.

The DCO settings to calibrate the DCO output frequency are stored in the information memory segment A.

CAL_BC1_1MHZ - 0x0009
CAL_DCO_1MHZ - 0x0008
CAL_BC1_8MHZ - 0x0007
CAL_DCO_8MHZ - 0x0006
CAL_BC1_12MHZ - 0x0005
CAL_DCO_12MHZ - 0x0004
CAL_BC1_16MHZ - 0x0003
CAL_DCO_16MHZ - 0x0002

If not exactly specified if TimerA0 or A1 it is TimerA0, so:

TACTL == TA0CTL
CCR0 == TACCR0 == TA0CCR0
CCR1 == TACCR1 == TA0CCR1
CCTL1 == TACCTL1 == TA0CCTL1

Each module has one CTL-register to set the basic operation of the module, so there are:

TA0CTL
TA1CTL

With these registers you set one module for counting up/down/etc. and the input divider and the clock source. This gives you the possibility to source both modules from different clocks, like Timer A0 from an LFXT for counting seconds or anything else and the other one to SMCLK for example to do any other thing.

Now there are the capture-compare-registers, three for TimerA0 and three for TimerA1:

TA0CCR0
TA0CCR1
TA0CCR2
TA1CCR0
TA1CCR1
TA1CCR2

and the control-registers for the capture-compare-modes, again three for every module:

TA0CCTL0
TA0CCTL1
TA0CCTL2
TA1CCTL0
TA1CCTL1
TA1CCTL2

Timer_A control TACTL
Timer_A counter TAR
Timer_A capture/compare control 0 TACCTL0
Timer_A capture/compare 0 TACCR0
Timer_A capture/compare control 1 TACCTL1
Timer_A capture/compare 1 TACCR1
Timer_A capture/compare control 2 TACCTL2
Timer_A capture/compare 2 TACCR2
Timer_A interrupt vector TAIV

1 s / ( 1000000 MHz [DCOCLK] / 8 [BCSCTL2 DIVSx: SMCLK Divider] / 8 [TACTL IDx: Timer A input divider] ) = 0,000064 s = 64 us


