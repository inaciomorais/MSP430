If the LED is off for 45,000 count (TAxCCRn value), and it is on for 5,000 count, it will be on approximately 10% of the time (5,000 / (45,000 + 5,000)). We say that the output has a 10% duty cycle.

Two interrupt vectors are associated with the 16-bit Timer_A module:
• TACCR0 interrupt vector for TACCR0 CCIFG
• TAIV interrupt vector for all other CCIFG flags and TAIFG

The TACCR1 CCIFG, TACCR2 CCIFG, and TAIFG flags are prioritized and combined to source a single interrupt vector. The interrupt vector register TAIV is used to determine which flag requested an interrupt.

The highest priority enabled interrupt generates a number in the TAIV register (see register description). This number can be evaluated or added to the program counter to automatically enter the appropriate software routine. Disabled Timer_A interrupts do not affect the TAIV value. Any access, read or write, of the TAIV register automatically resets the highest pending interrupt flag. If another interrupt flag is set, another interrupt is immediately generated after servicing the initial interrupt. For example, if the TACCR1 and TACCR2 CCIFG flags are set when the interrupt service routine accesses the TAIV register, TACCR1 CCIFG is reset automatically. After the RETI instruction of the interrupt service routine is executed, the TACCR2 CCIFG flag will generate another interrupt.

TAIV, Timer_A Interrupt Vector Register

TAIVx - Bits 3-1:
00h No interrupt pending
02h Capture/compare 1 TACCR1 CCIFG	Highest
04h Capture/compare 2 TACCR2 CCIFG
06h Reserved
08h Reserved
0Ah Timer overflow TAIFG
0Ch Reserved
0Eh Reserved				Lowest

Pulse-Width Modulation (PWM) means turning on/off a digital output with set percentages of time and that pulse width modulation can be useful for driving some outputs.

Function Select Registers PxSEL

Port pins are often multiplexed with other peripheral module functions. PxSEL is used to select the pin function - I/O port or peripheral module function. Setting PxSELx = 1 does not automatically set the pin direction. Other peripheral module functions may require the PxDIRx bits to be configured according to the direction needed for the module function.

With this instruction, the microcontroller's CPU gives control for the Px.x output to Timer0. As long as bit x is set in the P1SEL0 register, the CPU cannot turn on or turn off the Px.x output with the P1OUT register. Only the Timer0 peripheral can now turn on or off the Px.x output.

Output Unit

Each capture/compare block contains an output unit. The output unit is used to generate output signals such as PWM signals. Each output unit has eight operating modes that generate signals based on the EQU0 and EQUx signals.

Output Modes

The output modes are defined by the OUTMODx bits (TACCTLx, Capture/Compare Control Register - Bits 7-5). The OUTx signal is changed with the rising edge of the timer clock for all modes except mode 0. Output modes 2, 3, 6, and 7 are not useful for output unit 0, because EQUx = EQU0.

000 - Output - The output signal OUTx is defined by the OUTx bit. The OUTx signal updates immediately when OUTx is updated.
001 - Set - The output is set when the timer counts to the TACCRx value. It remains set until a reset of the timer, or until another output mode is selected and affects the output.
010 - Toggle/Reset - The output is toggled when the timer counts to the TACCRx value. It is reset when the timer counts to the TACCR0 value.
011 - Set/Reset - The output is set when the timer counts to the TACCRx value. It is reset when the timer counts to the TACCR0 value.
100 - Toggle - The output is toggled when the timer counts to the TACCRx value. The output period is double the timer period.
101 - Reset - The output is reset when the timer counts to the TACCRx value. It remains reset until another output mode is selected and affects the output.
110 - Toggle/Set - The output is toggled when the timer counts to the TACCRx value. It is set when the timer counts to the TACCR0 value.
111 - Reset/Set - The output is reset when the timer

Timer in Up Mode - The OUTx signal is changed when the timer counts up to the TACCRx value, and rolls from TACCR0 to
zero, depending on the output mode.

In mode 3, Timer0 will automatically generate a pulse width modulated output without the need for an interrupt service rountine. Mode 3 is officially called Set/Reset.

The CCRx-registers set the timer-value at which the event takes place. These are 16-bit-registers, so the value can be an integer between 0 and 65535. The CCTLx-registers set the operating mode of each modules channel. For example you can set the CCIE-bit to enter the corresponding ISR and do some stuff if the TA0R-timer-value (for module TA0) or the TA1R-timer-value (for module TA1) matches the preset value in CCRx.

So you can have six independent events. For example sourcing TA0 from LFXT 32k768-crystal, setting TA0CCR1 to 32768 in continous mode and enable the CCIE in TA0CCTL1. Add 32768 to TA1CCR1 in the ISR. This will result in having an interrupt every second.

As you can see there is also the overflow interrupt which kicks in if the TAIE bit is set in TA0CTL or TA1CTL and the TAR-registers flow over. This overflow also shares the interrupt-vector with CCR1 and CCR2.

You can use the ISR to set and reset a specific port-pin, but this needs code and execution-time. The MSP has the ability to do this completely in hardware, by setting the OUTMOD. In the datasheet you can see, which pin is associated to which timer. This is ideal for generating a PWM. From the MSP430G2253 datasheet, page 7 shows GPIO pin P1.6 and it’s functions. The line TA0.1/ demonstrates that P1.6 can be used as an input and output for Timer0_A (Timer0_A, compare: Out1 output).

For the MSP430G2553 this is:

P1.1 - TA0.0 - TA0CCR0
P1.2 - TA0.1 - TA0CCR1
P1.5 - TA0.0 - TA0CCR0
P1.6 - TA0.1 - TA0CCR1
P2.0 - TA1.0 - TA1CCR0
P2.1 - TA1.1 - TA1CCR1
P2.2 - TA1.1 - TA1CCR1
P2.3 - TA1.0 - TA1CCR0
P2.4 - TA1.2 - TA1CCR2
P2.5 - TA1.2 - TA1CCR2

The Timer0 peripheral can easily drive up to three different outputs, each at a different frequency.

TA0CCR1 and TA0CCR2 are bound to the same TIMER0_A1_VECTOR (TA0IV). When an interrupt for either a match on TA0CCR1 or TA0CCR2, the program leaves the main() function and goes to a single interrupt service rountine. As soon as the program starts the ISR, we need to determine if the interrupt was caused by a match on TA0CCR1 or TA0CCR2. This decision is made by a swtich statement. The switch statement takes an input (the register called TA0IV or TimerA0 Interrupt Vector) and then does something based upon the value of the input. If TA0IV has a value of 2, then the interrupt was caused by a match to TA0CCR1. If TA0IV has a value of 4, then the interrupt was caused by a match to TA0CCR2.



